generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Photo {
  id     String @id @default(cuid())
  full   String
  large  String
  medium String
  small  String
  dogId  Int
  Dog    Dog    @relation(fields: [dogId], references: [id], onDelete: Cascade)
}

model Address {
  address1 String?
  address2 String?
  city     String?
  zipCode  String?
  state    String?
  dogId    Int     @unique
  Dog      Dog     @relation(fields: [dogId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  favorites     FavoriteDogs?
}

model Dog {
  name    String
  age     String
  breed   String
  gender  String
  id      Int      @id @unique
  address Address?
  photos  Photo[]
  // favoriteDogs FavoriteDogs?
}

model FavoriteDogs {
  // id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  // dog    Dog?    @relation(fields: [dogId], references: [id])
  // dogId  Int?    @unique
  dogIds Int[]

  @@index(userId)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
