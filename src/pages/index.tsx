/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useContext } from "react";
import { api } from "~/utils/api";
import { DogContext } from "~/context/DogContext";
import Link from "next/link";
import { roboto } from "~/styles/fonts";

export default function Home() {
  // petfinder API set up
  // https://www.youtube.com/watch?v=RCg1KKs8v9I

  const { allDogs } = useContext(DogContext);
  // const { data: allDogs, isLoading: isDogsLoading, isSuccess: isDogsSuccess, isError: isDogsError } = api.dog.getAll.useQuery()
  const { mutate: addOneDog } = api.dog.createOne.useMutation({});

  console.log("allDogs", allDogs);

  const addAllDogs = () => {
    if (allDogs) {
      allDogs.map((dog) => addOneDog(dog));
    }
  };

  return (
    <>
      <Head>
        <title>{`JC's Dog Adoption`}</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <main className={`${roboto.className} flex min-h-screen flex-col items-center justify-center`}>
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <button onClick={() => addAllDogs()}>Add All Dogs</button>
          <Link href="/all-dogs">Go to Dogs Page</Link>
          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();
  console.log('sessionData', sessionData)

  const { data: secretMessage } = api.post.getSecretMessage.useQuery(
    undefined,
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-black">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-black no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
